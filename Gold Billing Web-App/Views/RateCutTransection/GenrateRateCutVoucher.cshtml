@model Gold_Billing_Web_App.Models.RateCutTransactionModel
@{
    ViewBag.Title = "Rate Cut Transaction";
}

<div class="container p-3" style="background-color: beige; border-radius: 10px;">
    <h2 class="text-center mb-3">@ViewBag.Title</h2>
    <hr />

    <!-- Alert Container -->
    <div id="alertContainer" class="mb-3"></div>

    @if (!ViewData.ModelState.IsValid)
    {
        <div class="alert alert-danger" role="alert">
            <h4 class="alert-heading">Validation Errors</h4>
            <ul>
                @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                {
                    <li>@error.ErrorMessage</li>
                }
            </ul>
        </div>
    }

    <form asp-action="AddRateCutTransaction" method="post" id="rateCutForm">
        @Html.AntiForgeryToken()
        <input type="hidden" asp-for="Id" />
        <input type="hidden" asp-for="Type" id="transactionType" />

        <div class="row mb-3">
            <div class="col-md-6">
                <label class="form-label">Account Name</label>
                <select asp-for="AccountId" id="accountSelect" class="form-control" onchange="fetchPreviousBalance(); updateBalances();" required>
                    <option value="">Select Account</option>
                    @foreach (var account in ViewBag.AccountDropDown)
                    {
                        if (Model.AccountId == account.Id)
                        {
                            <option value="@account.Id" data-group="@account.GroupName" selected>@account.AccountName</option>
                        }
                        else
                        {
                            <option value="@account.Id" data-group="@account.GroupName">@account.AccountName</option>
                        }
                    }
                </select>
                <span asp-validation-for="AccountId" class="text-danger" id="account-error"></span>
            </div>
            <div class="col-md-3">
                <label asp-for="Date" class="form-label">Date</label>
                <input asp-for="Date" type="date" class="form-control" required />
                <span asp-validation-for="Date" class="text-danger"></span>
            </div>
            <div class="col-md-3">
                <label asp-for="BillNo" class="form-label">Bill No</label>
                <input asp-for="BillNo" class="form-control" id="billNoInput" readonly />
                <span asp-validation-for="BillNo" class="text-danger"></span>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <label asp-for="Narration" class="form-label">Narration</label>
                <textarea asp-for="Narration" class="form-control" maxlength="500"></textarea>
                <span asp-validation-for="Narration" class="text-danger"></span>
            </div>
        </div>

        <div class="form-group">
            <label class="form-label">Transaction Type</label><br />
            <label><input type="radio" name="Type" value="GoldPurchaseRate" onchange="updateTypeAndBillNo(); updateBalances();" @(Model.Type == "GoldPurchaseRate" ? "checked" : "")> Gold Purchase Rate</label>
            <label><input type="radio" name="Type" value="GoldSaleRate" onchange="updateTypeAndBillNo(); updateBalances();" @(Model.Type == "GoldSaleRate" ? "checked" : "")> Gold Sale Rate</label>
        </div>

        <div class="mt-4">
            <table class="table table-bordered mt-3">
                <thead>
                    <tr>
                        <th>Weight</th>
                        <th>Tunch (%)</th>
                        <th>Rate</th>
                        <th>Amount</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td><input asp-for="Weight" type="number" step="0.001" min="0.001" class="form-control" onchange="updateBalances();" required /></td>
                        <td><input asp-for="Tunch" type="number" step="0.01" min="0.01" max="100" class="form-control" onchange="updateBalances();" required /></td>
                        <td><input asp-for="Rate" type="number" step="0.01" min="0.01" class="form-control" onchange="updateBalances();" required /></td>
                        <td><input asp-for="Amount" type="number" step="0.01" class="form-control" readonly /></td>
                    </tr>
                </tbody>
            </table>
        </div>

        <h3 class="mt-3">Balance Details</h3>
        <hr />
        <div class="table-responsive">
            <table class="table table-bordered">
                <thead class="bg-light">
                    <tr>
                        <th></th>
                        <th>Fine Metal</th>
                        <th>Amount</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Total Previous Balance</td>
                        <td><input type="number" step="0.001" id="prevFine" class="form-control" readonly /></td>
                        <td><input type="number" step="0.01" id="prevAmount" class="form-control" readonly /></td>
                    </tr>
                    <tr>
                        <td colspan="3">
                            <span id="lastBalanceDate" style="font-size: 0.8em; color: red;"></span>
                        </td>
                    </tr>
                    <tr>
                        <td>Current Transaction</td>
                        <td><input type="number" step="0.001" id="currentFine" class="form-control" readonly /></td>
                        <td><input type="number" step="0.01" id="currentAmount" class="form-control" readonly /></td>
                    </tr>
                    <tr>
                        <td>Total Balance</td>
                        <td><input type="number" step="0.001" id="totalFine" class="form-control" readonly /></td>
                        <td><input type="number" step="0.01" id="totalAmount" class="form-control" readonly /></td>
                    </tr>
                </tbody>
            </table>
        </div>

        <div class="text-center mt-3">
            <button type="submit" class="btn btn-primary">Save</button>
            <a href="@Url.Action("Index", "Home")" class="btn btn-secondary">Cancel</a>
        </div>
    </form>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.12/jquery.validate.unobtrusive.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        fetchPreviousBalance();
        fetchBillNo(document.querySelector('input[name="Type"]:checked').value);
        updateBalances();
    });

    function showAlert(message, type) {
        const alertContainer = document.getElementById('alertContainer');
        alertContainer.innerHTML = `
            <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        `;
    }

    function fetchPreviousBalance() {
        let accountId = document.getElementById('accountSelect').value;
        if (!accountId) {
            document.getElementById('prevFine').value = "0.000";
            document.getElementById('prevAmount').value = "0.00";
            document.getElementById('lastBalanceDate').innerHTML = "";
            updateBalances();
            return;
        }

        fetch(`/RateCutTransection/GetPreviousBalance?accountId=${accountId}`)
            .then(response => response.json())
            .then(data => {
                document.getElementById('prevFine').value = data.fine.toFixed(3);
                document.getElementById('prevAmount').value = data.amount.toFixed(2);
                document.getElementById('lastBalanceDate').innerHTML = data.lastBalanceDate
                    ? `Last updated: ${data.lastBalanceDate}`
                    : "No previous transactions";
                updateBalances();
            })
            .catch(error => {
                console.error('Error fetching previous balance:', error);
                document.getElementById('prevFine').value = "0.000";
                document.getElementById('prevAmount').value = "0.00";
                document.getElementById('lastBalanceDate').innerHTML = "Error fetching date";
                updateBalances();
            });
    }

    function updateTypeAndBillNo() {
        const type = document.querySelector('input[name="Type"]:checked').value;
        document.getElementById('transactionType').value = type;
        fetchBillNo(type);
        updateBalances();
    }

    function fetchBillNo(type) {
        fetch(`/RateCutTransection/GetNextBillNo?type=${type}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    document.getElementById('billNoInput').value = data.billNo;
                } else {
                    throw new Error(data.error);
                }
            })
            .catch(error => {
                console.error('Error fetching bill number:', error);
                showAlert(`Failed to update bill number: ${error.message}`, 'danger');
            });
    }

    function updateBalances() {
        let weight = parseFloat(document.getElementById('Weight').value) || 0;
        let tunch = parseFloat(document.getElementById('Tunch').value) || 0;
        let rate = parseFloat(document.getElementById('Rate').value) || 0;
        let prevFine = parseFloat(document.getElementById('prevFine').value) || 0;
        let prevAmount = parseFloat(document.getElementById('prevAmount').value) || 0;
        let transactionType = document.querySelector('input[name="Type"]:checked').value;

        // Calculate fine gold weight and amount
        let fineGold = weight * (tunch / 100); // Fine gold weight
        let amount = fineGold * rate;          // Amount = Fine Gold * Rate

        document.getElementById('Amount').value = amount.toFixed(2);

        let fineAdjustment, amountAdjustment;

        // Consistent logic for all accounts based on transaction type
        if (transactionType === "GoldPurchaseRate") {
            fineAdjustment = -fineGold;    // Decrease Fine (paying metal)
            amountAdjustment = amount;     // Increase Amount (receiving money)
        } else if (transactionType === "GoldSaleRate") {
            fineAdjustment = fineGold;     // Increase Fine (receiving metal)
            amountAdjustment = -amount;    // Decrease Amount (paying money)
        }

        document.getElementById('currentFine').value = fineAdjustment.toFixed(3);
        document.getElementById('currentAmount').value = amountAdjustment.toFixed(2);
        document.getElementById('totalFine').value = (prevFine + fineAdjustment).toFixed(3);
        document.getElementById('totalAmount').value = (prevAmount + amountAdjustment).toFixed(2);
    }

    document.getElementById('rateCutForm').addEventListener('submit', function (e) {
        e.preventDefault();
        let isFormValid = true;
        let errorMessages = [];

        document.querySelectorAll('.text-danger').forEach(span => span.innerHTML = '');

        if (!document.getElementById('accountSelect').value) {
            document.getElementById('account-error').innerHTML = 'Please select an account.';
            errorMessages.push('Account selection is required.');
            isFormValid = false;
        }

        if (!document.getElementById('Date').value) {
            document.querySelector('span[data-valmsg-for="Date"]').innerHTML = 'Date is required.';
            errorMessages.push('Please specify a transaction date.');
            isFormValid = false;
        }

        let weight = parseFloat(document.getElementById('Weight').value) || 0;
        if (weight <= 0) {
            document.querySelector('span[data-valmsg-for="Weight"]').innerHTML = 'Weight must be greater than 0.';
            errorMessages.push('Weight must be greater than 0.');
            isFormValid = false;
        }

        let tunch = parseFloat(document.getElementById('Tunch').value) || 0;
        if (tunch <= 0 || tunch > 100) {
            document.querySelector('span[data-valmsg-for="Tunch"]').innerHTML = 'Tunch must be between 0 and 100.';
            errorMessages.push('Tunch must be between 0 and 100.');
            isFormValid = false;
        }

        let rate = parseFloat(document.getElementById('Rate').value) || 0;
        if (rate <= 0) {
            document.querySelector('span[data-valmsg-for="Rate"]').innerHTML = 'Rate must be greater than 0.';
            errorMessages.push('Rate must be greater than 0.');
            isFormValid = false;
        }

        let narration = document.getElementById('Narration').value;
        if (narration.length > 500) {
            document.querySelector('span[data-valmsg-for="Narration"]').innerHTML = 'Narration must not exceed 500 characters.';
            errorMessages.push('Narration must not exceed 500 characters.');
            isFormValid = false;
        }

        if (!isFormValid) {
            let alertMessage = errorMessages.length > 0 ? errorMessages.join('<br>') : 'Please correct all validation errors.';
            showAlert(alertMessage, 'danger');
            return;
        }

        let formData = new FormData(this);
        fetch('@Url.Action("AddRateCutTransaction", "RateCutTransection")', {
            method: 'POST',
            body: formData,
            headers: {
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                Swal.fire({
                    title: 'Success!',
                    text: 'Transaction has been successfully saved!',
                    icon: 'success',
                    confirmButtonText: 'OK',
                    timer: 2000,
                    timerProgressBar: true
                }).then(() => {
                    window.location.href = data.redirectUrl;
                });
            } else {
                showAlert(data.error || 'Failed to save the transaction.', 'danger');
            }
        })
        .catch(error => {
            console.error('Error during save:', error);
            showAlert('An error occurred while saving the transaction.', 'danger');
        });
    });
</script>