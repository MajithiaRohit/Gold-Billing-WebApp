@model Gold_Billing_Web_App.Models.MetalTransactionViewModel
@{
    ViewBag.Title = "Metal Transaction";
}

<div class="container p-3" style="background-color: lavender; border-radius: 10px;">
    <h3 class="text-center mb-3 mt-3">@ViewBag.Title</h3>
    <div id="alertContainer" class="mb-3"></div>
    @if (!ViewData.ModelState.IsValid)
    {
        <div class="alert alert-danger" role="alert">
            <h4 class="alert-heading">Validation Errors</h4>
            <ul>
                @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                {
                    <li>@error.ErrorMessage</li>
                }
            </ul>
        </div>
    }

    <form asp-action="AddMetalTransaction" method="post" id="metalTransactionForm">
        @Html.AntiForgeryToken()
        <input type="hidden" asp-for="Type" id="transactionType" />
        <input type="hidden" asp-for="UserId" />
        <hr class="mb-3 mt-3" />
        <div class="row mb-3">
            <div class="col-md-4">
                <label asp-for="SelectedAccountId" class="form-label">Account</label>
                <select asp-for="SelectedAccountId" id="accountSelect" class="form-control" onchange="fetchPreviousBalance(); syncAccountIds();" required>
                    <option value="">Select Account</option>
                    @foreach (var account in ViewBag.AccountDropDown)
                    {
                        if (Model.SelectedAccountId == account.Id)
                        {
                            <option value="@account.Id" data-group="@account.GroupName" selected>@account.AccountName</option>
                        }
                        else
                        {
                            <option value="@account.Id" data-group="@account.GroupName">@account.AccountName</option>
                        }
                    }
                </select>
                <span asp-validation-for="SelectedAccountId" class="text-danger" id="account-error"></span>
            </div>
            <div class="col-md-4">
                <label asp-for="Date" class="form-label">Date</label>
                <input asp-for="Date" type="date" class="form-control" required />
                <span asp-validation-for="Date" class="text-danger"></span>
            </div>
            <div class="col-md-4 form-group">
                <label asp-for="BillNo" class="form-label">Bill Number</label>
                <input asp-for="BillNo" class="form-control" id="billNoInput" readonly />
                <span asp-validation-for="BillNo" class="text-danger"></span>
            </div>
        </div>
        <div class="row mb-3">
            <div class="col-md-6">
                <label asp-for="Narration" class="form-label">Narration</label>
                <textarea asp-for="Narration" class="form-control"></textarea>
                <span asp-validation-for="Narration" class="text-danger"></span>
            </div>
            <div class="col-md-6">
                <label class="form-label">Transaction Type</label><br />
                <label><input type="radio" name="Type" value="Payment" onchange="updateTypeAndBillNo()" checked> Payment</label>
                <label><input type="radio" name="Type" value="Receipt" onchange="updateTypeAndBillNo()"> Receipt</label>
            </div>
        </div>

        <div class="table-responsive">
            <table class="table table-bordered" id="metalTransactionTable">
                <thead class="bg-light">
                    <tr>
                        <th>Item</th>
                        <th>Gr.Wt.</th>
                        <th>Tunch (%)</th>
                        <th>Fine</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < Model.Items.Count; i++)
                    {
                        <tr>
                            <td>
                                <input asp-for="Items[i].Id" type="hidden" />
                                <input asp-for="Items[i].Type" type="hidden" value="@Model.Type" />
                                <input asp-for="Items[i].AccountId" type="hidden" class="account-id-input" />
                                <select asp-for="Items[i].ItemId" class="form-control item-select" onchange="setDefaultTunch(this); calculateFine(this); updateTotals();" required>
                                    <option value="">Select Item</option>
                                    @foreach (var item in ViewBag.ItemDropDown)
                                    {
                                        if (Model.Items[i].ItemId == item.Id)
                                        {
                                            <option value="@item.Id" selected>@item.ItemName</option>
                                        }
                                        else
                                        {
                                            <option value="@item.Id">@item.ItemName</option>
                                        }
                                    }
                                </select>
                                <span asp-validation-for="Items[i].ItemId" class="text-danger"></span>
                            </td>
                            <td>
                                <input asp-for="Items[i].GrossWeight" type="number" step="0.01" min="0.01" class="form-control weight-input" onchange="calculateFine(this); updateTotals();" required />
                                <span asp-validation-for="Items[i].GrossWeight" class="text-danger"></span>
                            </td>
                            <td>
                                <input asp-for="Items[i].Tunch" type="number" step="0.01" min="0.01" max="100" class="form-control tunch-input" onchange="calculateFine(this); updateTotals();" required />
                                <span asp-validation-for="Items[i].Tunch" class="text-danger"></span>
                            </td>
                            <td>
                                <input asp-for="Items[i].Fine" type="number" step="0.01" class="form-control fine-input" readonly />
                                <span asp-validation-for="Items[i].Fine" class="text-danger"></span>
                            </td>
                            <td>
                                @if (i > 0)
                                {
                                    <button type="button" class="btn btn-danger btn-sm" onclick="deleteRow(this)">Delete</button>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr class="bg-secondary text-white">
                        <td><strong>Total:</strong></td>
                        <td><input type="number" step="0.01" id="totalGrWt" class="form-control" readonly /></td>
                        <td></td>
                        <td><input type="number" step="0.01" id="totalFine" class="form-control" readonly /></td>
                        <td></td>
                    </tr>
                    <tr class="bg-info text-white">
                        <td colspan="2"></td>
                        <td class="text-right"><strong>Previous Balance:</strong></td>
                        <td><input type="number" step="0.01" id="prevFine" class="form-control" readonly /></td>
                        <td></td>
                    </tr>
                    <tr class="bg-warning text-dark">
                        <td colspan="2"></td>
                        <td class="text-right"><strong>Current Transaction:</strong></td>
                        <td><input type="number" step="0.01" id="currentFine" class="form-control" readonly /></td>
                        <td></td>
                    </tr>
                    <tr class="bg-success text-white">
                        <td colspan="2"></td>
                        <td class="text-right"><strong>Total Balance:</strong></td>
                        <td><input type="number" step="0.01" id="totalBalanceFine" class="form-control" readonly /></td>
                        <td></td>
                    </tr>
                </tfoot>
            </table>
            <button type="button" class="btn btn-primary mb-3" onclick="addNewRow()">Add New Row</button>
        </div>

        <div class="row mt-3">
            <div class="col-md-12 text-center">
                <button type="submit" class="btn btn-success">Save</button>
                <a href="@Url.Action("Index", "Home")" class="btn btn-danger">Cancel</a>
            </div>
        </div>
    </form>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.12/jquery.validate.unobtrusive.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        updateTotals();
        fetchPreviousBalance();
        syncAccountIds();
        fetchBillNo(document.querySelector('input[name="Type"]:checked').value);
        document.querySelectorAll('.item-select').forEach(select => {
            setDefaultTunch(select);
        });
    });

    function showAlert(message, type) {
        const alertContainer = document.getElementById('alertContainer');
        alertContainer.innerHTML = `
            <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        `;
    }

    function calculateFine(element) {
        let row = element.closest('tr');
        let grossWeight = parseFloat(row.querySelector('.weight-input').value) || 0;
        let tunch = parseFloat(row.querySelector('.tunch-input').value) || 0;
        let fine = grossWeight * (tunch / 100);
        row.querySelector('.fine-input').value = fine.toFixed(2);
        updateTotals();
    }

    function setDefaultTunch(select) {
        let row = select.closest('tr');
        let tunchInput = row.querySelector('.tunch-input');
        let selectedText = select.options[select.selectedIndex]?.text || '';
        selectedText = selectedText.trim().toLowerCase();

        switch (selectedText) {
            case 'fine metal':
                tunchInput.value = '100.00';
                break;
            case 'cadbury':
                tunchInput.value = '99.50';
                break;
            case 'dhal':
                tunchInput.value = '80.00';
                break;
            default:
                if (!tunchInput.value) tunchInput.value = '';
                break;
        }
        calculateFine(tunchInput);
    }

    function addNewRow() {
        let table = document.getElementById('metalTransactionTable').querySelector('tbody');
        let rowCount = table.getElementsByTagName('tr').length;
        let newRow = table.rows[0].cloneNode(true);

        newRow.querySelectorAll("input:not([readonly]), select").forEach(input => {
            let baseName = input.name.includes('Items') ? input.name.split('.')[1] : input.name;
            input.name = `Items[${rowCount}].${baseName}`;
            input.id = `Items_${rowCount}__${baseName}`;
            if (input.type !== 'hidden' && input.tagName !== 'SELECT') {
                input.value = '';
            }
            if (baseName === 'AccountId') {
                input.value = document.getElementById('accountSelect').value || '';
            }
        });

        newRow.querySelectorAll("input[readonly]").forEach(input => {
            let baseName = input.name.includes('Items') ? input.name.split('.')[1] : input.name;
            input.name = `Items[${rowCount}].${baseName}`;
            input.id = `Items_${rowCount}__${baseName}`;
            input.value = '0.00';
        });

        newRow.querySelectorAll("span.text-danger").forEach(span => {
            let baseFor = span.getAttribute('data-valmsg-for').split('.')[1];
            span.setAttribute('data-valmsg-for', `Items[${rowCount}].${baseFor}`);
            span.innerHTML = "";
        });

        let deleteButtonCell = newRow.querySelector('td:last-child');
        deleteButtonCell.innerHTML = '<button type="button" class="btn btn-danger btn-sm" onclick="deleteRow(this)">Delete</button>';

        table.appendChild(newRow);
        $.validator.unobtrusive.parse(newRow);
        updateTotals();
    }

    function deleteRow(button) {
        let row = button.closest('tr');
        row.remove();
        updateTotals();
    }

    function updateTotals() {
        let totalGrWt = 0;
        let totalFine = 0;

        document.querySelectorAll('#metalTransactionTable tbody tr').forEach(row => {
            let grWt = parseFloat(row.querySelector('.weight-input').value) || 0;
            let fine = parseFloat(row.querySelector('.fine-input').value) || 0;

            totalGrWt += grWt;
            totalFine += fine;
        });

        document.getElementById('totalGrWt').value = totalGrWt.toFixed(2);
        document.getElementById('totalFine').value = totalFine.toFixed(2);

        let prevFine = parseFloat(document.getElementById('prevFine').value) || 0;
        let transactionType = document.querySelector('input[name="Type"]:checked').value;
        let currentFine = totalFine;

        if (transactionType === 'Payment') {
            currentFine = -totalFine;
        } else if (transactionType === 'Receipt') {
            currentFine = totalFine;
        }

        document.getElementById('currentFine').value = currentFine.toFixed(2);
        document.getElementById('totalBalanceFine').value = (prevFine + currentFine).toFixed(2);
    }

    function fetchPreviousBalance() {
        let accountId = document.getElementById('accountSelect').value;
        if (!accountId) {
            document.getElementById('prevFine').value = "0.00";
            updateTotals();
            return;
        }

        fetch(`/MetalTransection/GetPreviousBalance?accountId=${accountId}`)
            .then(response => response.json())
            .then(data => {
                document.getElementById('prevFine').value = data.fine.toFixed(2);
                updateTotals();
            })
            .catch(error => {
                console.error('Error fetching previous balance:', error);
                document.getElementById('prevFine').value = "0.00";
                updateTotals();
            });
    }

    function syncAccountIds() {
        let accountId = document.getElementById('accountSelect').value;
        document.querySelectorAll('.account-id-input').forEach(input => {
            input.value = accountId || '';
        });
    }

    function updateTypeAndBillNo() {
        const type = document.querySelector('input[name="Type"]:checked').value;
        document.getElementById('transactionType').value = type;
        fetchBillNo(type);
        updateTotals();
    }

    function fetchBillNo(type) {
        fetch(`/MetalTransection/GetNextBillNo?type=${type}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    document.getElementById('billNoInput').value = data.billNo;
                } else {
                    throw new Error(data.error);
                }
            })
            .catch(error => {
                console.error('Error fetching bill number:', error);
                showAlert(`Failed to update bill number: ${error.message}`, 'danger');
            });
    }

    document.getElementById('metalTransactionForm').addEventListener('submit', function (e) {
        e.preventDefault();
        syncAccountIds();

        let formData = new FormData(this);

        console.log('FormData being sent:');
        for (var pair of formData.entries()) {
            console.log(`${pair[0]}: ${pair[1]}`);
        }

        fetch(this.action, {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            console.log('Server response:', data);
            if (data.success) {
                Swal.fire({
                    title: 'Success!',
                    text: 'Transaction has been successfully saved!',
                    icon: 'success',
                    confirmButtonText: 'OK',
                    timer: 2000,
                    timerProgressBar: true
                }).then(() => {
                    window.location.href = data.redirectUrl;
                });
            } else {
                showAlert(data.error || 'Failed to save the transaction.', 'danger');
            }
        })
        .catch(error => {
            console.error('Error during save:', error);
            showAlert('An error occurred while saving the transaction.', 'danger');
        });
    });
</script>