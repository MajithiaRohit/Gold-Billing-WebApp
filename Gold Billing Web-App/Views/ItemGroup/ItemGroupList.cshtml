@model System.Data.DataTable

@{
    ViewData["Title"] = "Item Group List";
}

<div class="card">
    <div class="card-body">
        <h2 class="mt-4">Item Group List</h2>
        <div class="mb-3">
            <a asp-action="AddEditItemGroup" asp-controller="ItemGroup" class="btn btn-primary">Add New Item Group</a>
        </div>
        <table class="table table-bordered mt-3">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Group Name</th>
                    <th>Date</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (System.Data.DataRow row in Model.Rows)
                {
                    <tr>
                        <td>@row["Id"]</td>
                        <td>@row["Name"]</td>
                        <td>@(((DateTime)row["Date"]).ToString("yyyy-MM-dd"))</td>
                        <td>
                            <a asp-action="AddEditItemGroup" asp-controller="ItemGroup" asp-route-Id="@row["Id"]" class="btn btn-outline-primary">Edit</a>
                            <form asp-action="DeleteItemGroup" asp-controller="ItemGroup" method="post" class="delete-form d-inline" data-item-id="@row["Id"]">
                                <input type="hidden" name="Id" value="@row["Id"]" />
                                <button type="submit" class="btn btn-outline-danger">Delete</button>
                            </form>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        // Store messages from TempData as JavaScript variables
        const successMessage = '@Html.Raw(TempData["SuccessMessage"])';
        const errorMessage = '@Html.Raw(TempData["ErrorMessage"])';

        document.addEventListener('DOMContentLoaded', function () {
            // Show success message if present
            if (successMessage) {
                Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: successMessage,
                    confirmButtonColor: '#3085d6',
                    confirmButtonText: 'OK'
                });
            }

            // Show error message if present
            if (errorMessage) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: errorMessage,
                    confirmButtonColor: '#d33',
                    confirmButtonText: 'OK'
                });
            }

            // Add SweetAlert confirmation for delete forms
            document.querySelectorAll('.delete-form').forEach(form => {
                form.addEventListener('submit', function (e) {
                    e.preventDefault(); // Prevent immediate form submission

                    Swal.fire({
                        title: 'Are you sure?',
                        text: 'Do you really want to delete this item group? This action cannot be undone.',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#d33',
                        cancelButtonColor: '#3085d6',
                        confirmButtonText: 'Yes, delete it!',
                        cancelButtonText: 'No, keep it'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            fetch(form.action, {
                                method: 'POST',
                                body: new FormData(form),
                                headers: {
                                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                                }
                            })
                            .then(response => {
                                if (!response.ok) {
                                    throw new Error('Server error: ' + response.statusText);
                                }
                                return response.json();
                            })
                            .then(data => {
                                if (data.success) {
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Deleted!',
                                        text: 'The item group has been deleted.',
                                        confirmButtonColor: '#3085d6',
                                        confirmButtonText: 'OK'
                                    }).then(() => {
                                        form.closest('tr').remove();
                                    });
                                } else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Cannot Delete',
                                        text: data.error || 'Failed to delete the item group.',
                                        confirmButtonColor: '#d33',
                                        confirmButtonText: 'OK'
                                    });
                                }
                            })
                            .catch(error => {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: 'An error occurred: ' + error.message,
                                    confirmButtonColor: '#d33',
                                    confirmButtonText: 'OK'
                                });
                            });
                        }
                    });
                });
            });
        });
    </script>
}