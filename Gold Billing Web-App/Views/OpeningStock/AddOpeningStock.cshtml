@model Gold_Billing_Web_App.Models.OpeningStockModel

@{
    ViewBag.Title = "Gold Billing";
}

<div class="container p-3" style="background-color: #f8d7da; border-radius: 10px;">
    <h3 class="text-center">Gold Billing</h3>
    <form asp-action="AddOpeningStock" method="post">
        <div class="row mb-3">
            <div class="col-md-3">
                <label asp-for="Date"></label>
                <input asp-for="Date" type="date" class="form-control" />
                <span asp-validation-for="Date" class="text-danger"></span>
            </div>
            <div class="col-md-3 form-group">
                <label asp-for="BillNo"></label>
                <input asp-for="BillNo" class="form-control" readonly />
            </div>
            <div class="col-md-6">
                <label asp-for="Narration"></label>
                <input asp-for="Narration" type="text" class="form-control" />
                <span asp-validation-for="Narration" class="text-danger"></span>
            </div>
        </div>

        <div class="table-responsive">
            <table class="table table-bordered">
                <thead class="bg-light">
                    <tr>
                        <th>Item Name</th>
                        <th>Pc</th>
                        <th>Gr.Wt.</th>
                        <th>Less</th>
                        <th>Net.Wt.</th>
                        <th>Tunch (%)</th>
                        <th>Wstg (%)</th>
                        <th>TW (%)</th>
                        <th>Rate</th>
                        <th>Gold Fine</th>
                        <th>Total Amount</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            <select asp-for="ItemId" asp-items="@(new SelectList(ViewBag.itemDropDown, "Id", "ItemName"))" class="form-control item-select">
                                <option value="">Select Item</option>
                            </select>
                            <span asp-validation-for="ItemId" class="text-danger"></span>
                        </td>
                        <td><input asp-for="Pc" type="number" class="form-control pc-input" /></td>
                        <td><input asp-for="Weight" type="number" step="0.01" class="form-control weight-input" onchange="calculateNetWeight(this)" /></td>
                        <td><input asp-for="Less" type="number" step="0.01" class="form-control less-input" onchange="calculateNetWeight(this)" /></td>
                        <td><input asp-for="NetWt" type="number" step="0.01" class="form-control netwt-input" readonly /></td>
                        <td><input asp-for="Tunch" type="number" step="0.01" class="form-control tunch-input" onchange="calculateTW(this)" /></td>
                        <td><input asp-for="Wastage" type="number" step="0.01" class="form-control wastage-input" onchange="calculateTW(this)" /></td>
                        <td><input asp-for="TW" type="number" step="0.01" class="form-control tw-input" readonly /></td>
                        <td>
                            <input asp-for="Rate" type="number" step="0.01" class="form-control rate-input" onchange="calculateFineAndAmount(this.closest('tr'))" />
                        </td>
                        <td><input asp-for="Fine" type="number" step="0.01" class="form-control fine-input" readonly /></td>
                        <td><input asp-for="Amount" type="number" step="0.01" class="form-control amount-input" readonly /></td>
                    </tr>
                </tbody>
            </table>
        </div>
        <button class="btn btn-primary mb-3" onclick="addNewRow()">Add New Row</button>
        <div class="row mt-3">
            <div class="col-md-12 text-center">
                <button type="submit" class="btn btn-success">Save</button>
                <button type="button" class="btn btn-danger" onclick="window.location.href='@Url.Action("ViewStock")'">Cancel</button>
                <button type="button" class="btn btn-warning" onclick="deleteOpeningStock(@Model.Id)">Delete</button>
                <button type="button" class="btn btn-primary" onclick="window.location.href='@Url.Action("AddOpeningStock")'">New</button>
                <button type="button" class="btn btn-info">Print</button>
                <button type="button" class="btn btn-secondary">Export</button>
            </div>
        </div>
    </form>
</div>

<script>
    function calculateNetWeight(element) {
        let row = element.closest('tr');
        let grossWeight = parseFloat(row.querySelector('.weight-input').value) || 0;
        console.log("Gross Weight:", grossWeight);
        let less = parseFloat(row.querySelector('.less-input').value) || 0;
        console.log("Less:", less);
        let netWeight = grossWeight - less;
        row.querySelector('.netwt-input').value = netWeight.toFixed(2);
        console.log("Net Weight:", netWeight);
       calculateFineAndAmount(row);

    }

    function calculateTW(element) {
        let row = element.closest('tr');
        let tunch = parseFloat(row.querySelector('.tunch-input').value) || 0;
        let wastage = parseFloat(row.querySelector('.wastage-input').value) || 0;
        let tw = tunch + wastage;
        row.querySelector('.tw-input').value = tw.toFixed(2);calculateFineAndAmount(row);

    }

            function calculateFineAndAmount(row) {
        let netWeight = parseFloat(row.querySelector('.netwt-input').value) || 0;
        let tw = parseFloat(row.querySelector('.tw-input').value) || 0;
        let rate = parseFloat(row.querySelector('.rate-input').value) || 0;

        // Ensure valid calculation
        let fine = parseFloat((netWeight * (tw / 100)).toFixed(2)) || 0;
        let amount = fine * rate;

        // Prevent NaN issue
        amount = isNaN(amount) ? 0 : amount.toFixed(2);

        console.log("Net Weight:", netWeight, "TW:", tw, "Rate:", rate, "Fine:", fine, "Amount:", amount);

        // Ensure input fields exist before updating
        let fineInput = row.querySelector('.fine-input');
        let amountInput = row.querySelector('.amount-input');

        if (fineInput) fineInput.value = fine;
        if (amountInput) amountInput.value = amount;
    }


    function addNewRow() {
        let table = document.querySelector(".table tbody");
        let rowCount = table.getElementsByTagName('tr').length;
        let newRow = table.rows[0].cloneNode(true);

        // Update name attributes for model binding
        newRow.querySelectorAll("input, select").forEach(input => {
            let name = input.name.replace("[0]", `[${rowCount}]`);
            input.name = name;
            input.value = ""; // Clear values in the new row
        });

        // Remove existing IDs and add classes for dynamic targeting
        newRow.querySelectorAll("input, select").forEach(input => {
            input.removeAttribute("id");
            if (input.classList.contains("item-select")) input.classList.add("item-select");
            if (input.classList.contains("pc-input")) input.classList.add("pc-input");
            if (input.classList.contains("weight-input")) input.classList.add("weight-input");
            if (input.classList.contains("less-input")) input.classList.add("less-input");
            if (input.classList.contains("netwt-input")) input.classList.add("netwt-input");
            if (input.classList.contains("tunch-input")) input.classList.add("tunch-input");
            if (input.classList.contains("wastage-input")) input.classList.add("wastage-input");
            if (input.classList.contains("tw-input")) input.classList.add("tw-input");
            if (input.classList.contains("rate-input")) input.classList.add("rate-input");
            if (input.classList.contains("fine-input")) input.classList.add("fine-input");
            if (input.classList.contains("amount-input")) input.classList.add("amount-input");
        });

        // Reset calculated fields
        newRow.querySelector('.netwt-input').value = "";
        newRow.querySelector('.tw-input').value = "";
        newRow.querySelector('.fine-input').value = "";
        newRow.querySelector('.amount-input').value = "";

        table.appendChild(newRow);
    }

    function deleteOpeningStock(id) {
        if (confirm("Are you sure you want to delete this record?")) {
            window.location.href = '@Url.Action("DeleteOpeningStock", "OpeningStock")?id=' + id;
        }
    }
</script>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}