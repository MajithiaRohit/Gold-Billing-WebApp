@model Gold_Billing_Web_App.Models.AmountTransactionModel
@{
    ViewBag.Title = "Amount Transaction";
}

<div class="container-sm p-3" style="background-color: lightsteelblue; border-radius: 10px;">
    <h3 class="text-center mb-3 mt-3">@ViewBag.Title</h3>

    <!-- Alert Container (for errors) -->
    <div id="alertContainer" class="mb-3"></div>

    <!-- Bootstrap Validation Summary -->
    @if (!ViewData.ModelState.IsValid)
    {
        <div class="alert alert-danger" role="alert">
            <h4 class="alert-heading">Validation Errors</h4>
            <ul>
                @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                {
                    <li>@error.ErrorMessage</li>
                }
            </ul>
        </div>
    }

    <form asp-action="AddAmountTransaction" method="post" id="amountTransactionForm">
        @Html.AntiForgeryToken()
        <input type="hidden" asp-for="Id" />
        <input type="hidden" asp-for="Type" id="transactionType" />
        <hr class="mb-3 mt-3" />

        <!-- First Row: Account, Date, BillNo -->
        <div class="row mb-3">
            <div class="col-md-4">
                <label class="form-label">Account</label>
                <select id="accountSelect" name="SelectedAccountId" class="form-control" onchange="fetchPreviousBalance(); updateBalances();" required>
                    <option value="">Select Account</option>
                    @foreach (var account in ViewBag.AccountDropDown)
                    {
                        if (ViewBag.SelectedAccountId == account.Id)
                        {
                            <option value="@account.Id" data-group="@account.GroupName" selected>@account.AccountName</option>
                        }
                        else
                        {
                            <option value="@account.Id" data-group="@account.GroupName">@account.AccountName</option>
                        }
                    }
                </select>
                <span id="account-error" class="text-danger"></span>
            </div>
            <div class="col-md-4">
                <label asp-for="Date" class="form-label">Date</label>
                <input asp-for="Date" type="date" class="form-control" required />
                <span asp-validation-for="Date" class="text-danger"></span>
            </div>
            <div class="col-md-4">
                <label asp-for="BillNo" class="form-label">Bill Number</label>
                <input asp-for="BillNo" class="form-control" id="billNoInput" readonly />
                <span asp-validation-for="BillNo" class="text-danger"></span>
            </div>
        </div>

        <!-- Second Row: Narration -->
        <div class="row mb-3">
            <div class="col-md-12">
                <label asp-for="Narration" class="form-label">Narration</label>
                <textarea asp-for="Narration" class="form-control" maxlength="500"></textarea>
                <span asp-validation-for="Narration" class="text-danger"></span>
            </div>
        </div>

        <!-- Third Row: Transaction Type -->
        <div class="row mb-3">
            <div class="col-md-6">
                <label class="form-label">Transaction Type</label><br />
                <label><input type="radio" name="Type" value="Payment" onchange="updateTypeAndBillNo(); updateBalances();" @(Model.Type == "Payment" ? "checked" : "")> Payment</label>
                <label><input type="radio" name="Type" value="Receive" onchange="updateTypeAndBillNo(); updateBalances();" @(Model.Type == "Receive" ? "checked" : "")> Receive</label>
            </div>
        </div>

        <!-- Fourth Row: Payment Mode, Amount -->
        <div class="row mb-3">
            <div class="col-md-3">
                <label asp-for="PaymentModeId" class="form-label">Payment Mode</label>
                <select asp-for="PaymentModeId" class="form-control" required>
                    <option value="">Select</option>
                    @foreach (var mode in ViewBag.PaymentModeDropDown)
                    {
                        if (Model.PaymentModeId == mode.Id)
                        {
                            <option value="@mode.Id" selected>@mode.ModeName</option>
                        }
                        else
                        {
                            <option value="@mode.Id">@mode.ModeName</option>
                        }
                    }
                </select>
                <span asp-validation-for="PaymentModeId" class="text-danger"></span>
            </div>
            <div class="col-md-3">
                <label asp-for="Amount" class="form-label">Amount</label>
                <input asp-for="Amount" type="number" step="0.01" min="0.01" class="form-control" onchange="updateBalances();" required />
                <span asp-validation-for="Amount" class="text-danger"></span>
            </div>
        </div>

        <!-- Balance Table -->
        <div class="table-responsive">
            <table class="table table-bordered">
                <tfoot>
                    <tr class="bg-info text-white">
                        <td class="text-right"><strong>Previous Balance:</strong></td>
                        <td><input type="number" step="0.01" id="prevAmount" class="form-control" readonly /></td>
                    </tr>
                    <tr class="bg-warning text-dark">
                        <td class="text-right"><strong>Current Transaction:</strong></td>
                        <td><input type="number" step="0.01" id="currentAmount" class="form-control" readonly /></td>
                    </tr>
                    <tr class="bg-success text-white">
                        <td class="text-right"><strong>Total Balance:</strong></td>
                        <td><input type="number" step="0.01" id="totalBalanceAmount" class="form-control" readonly /></td>
                    </tr>
                </tfoot>
            </table>
        </div>

        <div class="row mt-3">
            <div class="col-md-12 text-center">
                <button type="submit" class="btn btn-success">Save</button>
                <a href="@Url.Action("Index", "Home")" class="btn btn-danger">Cancel</a>
            </div>
        </div>
    </form>
</div>

<!-- Include jQuery and Validation Libraries -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.12/jquery.validate.unobtrusive.min.js"></script>

<!-- Include SweetAlert2 -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        fetchPreviousBalance();
        fetchBillNo(document.querySelector('input[name="Type"]:checked').value);
        updateBalances();
    });

    function showAlert(message, type) {
        const alertContainer = document.getElementById('alertContainer');
        alertContainer.innerHTML = `
            <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        `;
    }

    function fetchPreviousBalance() {
        let accountId = document.getElementById('accountSelect').value;
        if (!accountId) {
            document.getElementById('prevAmount').value = "0.00";
            updateBalances();
            return;
        }

        fetch(`/AmmountTransection/GetPreviousBalance?accountId=${accountId}`)
            .then(response => response.json())
            .then(data => {
                document.getElementById('prevAmount').value = data.amount.toFixed(2);
                updateBalances();
            })
            .catch(error => {
                console.error('Error fetching previous balance:', error);
                document.getElementById('prevAmount').value = "0.00";
                updateBalances();
            });
    }

    function updateTypeAndBillNo() {
        const type = document.querySelector('input[name="Type"]:checked').value;
        document.getElementById('transactionType').value = type;
        fetchBillNo(type);
        updateBalances();
    }

    function fetchBillNo(type) {
        fetch(`/AmmountTransection/GetNextBillNo?type=${type}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    document.getElementById('billNoInput').value = data.billNo;
                } else {
                    throw new Error(data.error);
                }
            })
            .catch(error => {
                console.error('Error fetching bill number:', error);
                showAlert(`Failed to update bill number: ${error.message}`, 'danger');
            });
    }

    function updateBalances() {
        let prevAmount = parseFloat(document.getElementById('prevAmount').value) || 0;
        let amount = parseFloat(document.getElementById('Amount').value) || 0;
        let transactionType = document.querySelector('input[name="Type"]:checked').value;
        let currentAmount = amount;

        if (transactionType === 'Payment') {
            currentAmount = -amount; // Payment decreases balance
        } else if (transactionType === 'Receive') {
            currentAmount = amount;  // Receive increases balance
        }

        document.getElementById('currentAmount').value = currentAmount.toFixed(2);
        document.getElementById('totalBalanceAmount').value = (prevAmount + currentAmount).toFixed(2);
    }

    document.getElementById('amountTransactionForm').addEventListener('submit', function (e) {
        e.preventDefault();
        let isFormValid = true;
        let errorMessages = [];

        document.querySelectorAll('.text-danger').forEach(span => span.innerHTML = '');

        if (!document.getElementById('accountSelect').value) {
            document.getElementById('account-error').innerHTML = 'Please select an account.';
            errorMessages.push('Account selection is required.');
            isFormValid = false;
        }

        if (!document.getElementById('Date').value) {
            document.querySelector('span[data-valmsg-for="Date"]').innerHTML = 'Date is required.';
            errorMessages.push('Please specify a transaction date.');
            isFormValid = false;
        }

        if (!document.querySelector('select[name="PaymentModeId"]').value) {
            document.querySelector('span[data-valmsg-for="PaymentModeId"]').innerHTML = 'Payment Mode is required.';
            errorMessages.push('Please select a payment mode.');
            isFormValid = false;
        }

        let amount = parseFloat(document.getElementById('Amount').value) || 0;
        if (amount <= 0) {
            document.querySelector('span[data-valmsg-for="Amount"]').innerHTML = 'Amount must be greater than 0.';
            errorMessages.push('Amount must be greater than 0.');
            isFormValid = false;
        }

        let narration = document.querySelector('textarea[name="Narration"]').value;
        if (narration.length > 500) {
            document.querySelector('span[data-valmsg-for="Narration"]').innerHTML = 'Narration must not exceed 500 characters.';
            errorMessages.push('Narration must not exceed 500 characters.');
            isFormValid = false;
        }

        if (!isFormValid) {
            let alertMessage = errorMessages.length > 0
                ? errorMessages.join('<br>')
                : 'Please correct all validation errors before submitting.';
            showAlert(alertMessage, 'danger');
            return;
        }

        let formData = new FormData(this);
        fetch('@Url.Action("AddAmountTransaction", "AmmountTransection")', {
            method: 'POST',
            body: formData,
            headers: {
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                Swal.fire({
                    title: 'Success!',
                    text: 'Transaction has been successfully saved!',
                    icon: 'success',
                    confirmButtonText: 'OK',
                    timer: 2000,
                    timerProgressBar: true
                }).then(() => {
                    window.location.href = data.redirectUrl;
                });
            } else {
                showAlert(data.error || 'Failed to save the transaction.', 'danger');
            }
        })
        .catch(error => {
            console.error('Error during save:', error);
            showAlert('An error occurred while saving the transaction.', 'danger');
        });
    });
</script>